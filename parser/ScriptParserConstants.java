/* Generated By:JavaCC: Do not edit this line. ScriptParserConstants.java */

/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface ScriptParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int SINGLE_LINE_COMMENT = 9;
  /** RegularExpression Id. */
  int FORMAL_COMMENT = 11;
  /** RegularExpression Id. */
  int MULTI_LINE_COMMENT = 12;
  /** RegularExpression Id. */
  int INTEGER_LITERAL = 14;
  /** RegularExpression Id. */
  int HEX_LITERAL = 15;
  /** RegularExpression Id. */
  int OCTAL_LITERAL = 16;
  /** RegularExpression Id. */
  int BINARY_LITERAL = 17;
  /** RegularExpression Id. */
  int FLOATING_POINT_LITERAL = 18;
  /** RegularExpression Id. */
  int SCIENTIFIC_NOTATION = 19;
  /** RegularExpression Id. */
  int FRACTION_LITERAL = 20;
  /** RegularExpression Id. */
  int CHARACTER_LITERAL = 21;
  /** RegularExpression Id. */
  int STRING_LITERAL = 22;
  /** RegularExpression Id. */
  int IDENTIFIER = 23;
  /** RegularExpression Id. */
  int LETTER = 24;
  /** RegularExpression Id. */
  int PART_LETTER = 25;
  /** RegularExpression Id. */
  int LPAREN = 26;
  /** RegularExpression Id. */
  int RPAREN = 27;
  /** RegularExpression Id. */
  int LBRACE = 28;
  /** RegularExpression Id. */
  int RBRACE = 29;
  /** RegularExpression Id. */
  int LBRACKET = 30;
  /** RegularExpression Id. */
  int RBRACKET = 31;
  /** RegularExpression Id. */
  int SEMICOLON = 32;
  /** RegularExpression Id. */
  int COMMA = 33;
  /** RegularExpression Id. */
  int DOT = 34;
  /** RegularExpression Id. */
  int AT = 35;
  /** RegularExpression Id. */
  int DOLLAR = 36;
  /** RegularExpression Id. */
  int POUND = 37;
  /** RegularExpression Id. */
  int ASSIGN = 38;
  /** RegularExpression Id. */
  int LT = 39;
  /** RegularExpression Id. */
  int BANG = 40;
  /** RegularExpression Id. */
  int TILDE = 41;
  /** RegularExpression Id. */
  int HOOK = 42;
  /** RegularExpression Id. */
  int COLON = 43;
  /** RegularExpression Id. */
  int PLUS = 44;
  /** RegularExpression Id. */
  int MINUS = 45;
  /** RegularExpression Id. */
  int STAR = 46;
  /** RegularExpression Id. */
  int SLASH = 47;
  /** RegularExpression Id. */
  int BACKSLASH = 48;
  /** RegularExpression Id. */
  int BIT_AND = 49;
  /** RegularExpression Id. */
  int BIT_OR = 50;
  /** RegularExpression Id. */
  int XOR = 51;
  /** RegularExpression Id. */
  int REM = 52;
  /** RegularExpression Id. */
  int GT = 53;
  /** RegularExpression Id. */
  int EQ = 54;
  /** RegularExpression Id. */
  int LE = 55;
  /** RegularExpression Id. */
  int GE = 56;
  /** RegularExpression Id. */
  int NE = 57;
  /** RegularExpression Id. */
  int SC_OR = 58;
  /** RegularExpression Id. */
  int SC_AND = 59;
  /** RegularExpression Id. */
  int LSHIFT = 60;
  /** RegularExpression Id. */
  int RSHIFT = 61;
  /** RegularExpression Id. */
  int CONTAINSET = 62;
  /** RegularExpression Id. */
  int BEGLONGSET = 63;
  /** RegularExpression Id. */
  int LTGT = 64;
  /** RegularExpression Id. */
  int CONTAIN = 65;
  /** RegularExpression Id. */
  int BEGLONG = 66;
  /** RegularExpression Id. */
  int NOTBEGLONG = 67;
  /** RegularExpression Id. */
  int NOTCONTAIN = 68;
  /** RegularExpression Id. */
  int PLUSASSIGN = 69;
  /** RegularExpression Id. */
  int MINUSASSIGN = 70;
  /** RegularExpression Id. */
  int NOTIDENTITY = 71;
  /** RegularExpression Id. */
  int ISCLASS = 72;
  /** RegularExpression Id. */
  int ISNOTCLASS = 73;
  /** RegularExpression Id. */
  int ELLIPSIS = 74;
  /** RegularExpression Id. */
  int FUNCTOR = 75;
  /** RegularExpression Id. */
  int NOTIS = 76;
  /** RegularExpression Id. */
  int NOTRUN = 77;
  /** RegularExpression Id. */
  int INNERRUN = 78;
  /** RegularExpression Id. */
  int COLONEQUAL = 79;
  /** RegularExpression Id. */
  int DUALCOLON = 80;

  /** Lexical state. */
  int DEFAULT = 0;
  /** Lexical state. */
  int IN_SINGLE_LINE_COMMENT = 1;
  /** Lexical state. */
  int IN_FORMAL_COMMENT = 2;
  /** Lexical state. */
  int IN_MULTI_LINE_COMMENT = 3;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\n\"",
    "\"\\r\"",
    "\"\\f\"",
    "\"//\"",
    "<token of kind 7>",
    "\"/*\"",
    "<SINGLE_LINE_COMMENT>",
    "<token of kind 10>",
    "\"*/\"",
    "\"*/\"",
    "<token of kind 13>",
    "<INTEGER_LITERAL>",
    "<HEX_LITERAL>",
    "<OCTAL_LITERAL>",
    "<BINARY_LITERAL>",
    "<FLOATING_POINT_LITERAL>",
    "<SCIENTIFIC_NOTATION>",
    "<FRACTION_LITERAL>",
    "<CHARACTER_LITERAL>",
    "<STRING_LITERAL>",
    "<IDENTIFIER>",
    "<LETTER>",
    "<PART_LETTER>",
    "\"(\"",
    "\")\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\";\"",
    "\",\"",
    "\".\"",
    "\"@\"",
    "\"$\"",
    "\"#\"",
    "\"=\"",
    "\"<\"",
    "\"!\"",
    "\"~\"",
    "\"?\"",
    "\":\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"\\\\\"",
    "\"&\"",
    "\"|\"",
    "\"^\"",
    "\"%\"",
    "\">\"",
    "\"==\"",
    "\"<=\"",
    "\">=\"",
    "\"!=\"",
    "\"||\"",
    "\"&&\"",
    "\"<<\"",
    "\">>\"",
    "\"+>\"",
    "\"<+\"",
    "\"<>\"",
    "\"->\"",
    "\"<-\"",
    "\"<!\"",
    "\"!>\"",
    "\"+=\"",
    "\"-=\"",
    "\"^=\"",
    "\"%=\"",
    "\"~=\"",
    "\"...\"",
    "\"=>\"",
    "\"$!\"",
    "\"#~\"",
    "\"##\"",
    "\":=\"",
    "\"::\"",
  };

}
